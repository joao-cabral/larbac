---
import Layout from "../../layouts/index.astro";
---

<Layout title="Tabela de Schulte" header={false}>
  <div class="game-container">
    <div class="game-header">
      <button id="back-btn" class="back-btn" aria-label="Voltar">
        <span class="back-icon">‚Üê</span>
      </button>
      <h1>Tabela de Schulte</h1>
      <p>Encontre os n√∫meros em ordem crescente o mais r√°pido poss√≠vel!</p>
      <button id="theme-toggle" class="theme-toggle" aria-label="Alternar tema">
        <span class="theme-icon">üåô</span>
      </button>
    </div>

    <div class="game-controls">
      <div class="control-group">
        <label for="gridSize">Tamanho da Grade:</label>
        <select id="gridSize">
          <option value="4">4x4</option>
          <option value="5" selected>5x5</option>
          <option value="6">6x6</option>
          <option value="7">7x7</option>
          <option value="8">8x8</option>
          <option value="9">9x9</option>
        </select>
      </div>

      <div class="control-group">
        <button id="gameBtn" class="btn btn-primary">Iniciar</button>
      </div>
    </div>

    <div class="game-info">
      <div id="timer" class="timer">00:00</div>
      <div id="nextNumber" class="next-number">Pr√≥ximo: 1</div>
      <div id="gameMessage" class="game-message">
        Clique em "Iniciar" para come√ßar!
      </div>
    </div>

    <div class="grid-container">
      <div id="countdown" class="countdown hidden">3</div>
      <div id="schulteGrid" class="schulte-grid"></div>
    </div>

    <!-- Modal de Parab√©ns -->
    <div id="congratulations-modal" class="congratulations-modal">
      <div class="modal-content">
        <h2>üéâ Parab√©ns! üéâ</h2>
        <p>Voc√™ completou a Tabela de Schulte!</p>
        <p id="completion-time" class="completion-time"></p>
        <button id="reload-button" class="reload-button">üîÑ Recome√ßar</button>
      </div>
    </div>

    <!-- Se√ß√£o de Explica√ß√£o -->
    <div class="explanation-section">
      <h2>O que √© a Tabela de Schulte?</h2>
      <p>
        A Tabela de Schulte foi desenvolvida pelo psiquiatra e psicoterapeuta
        alem√£o Walter Schulte como um teste psicodiagn√≥stico para estudar as
        propriedades da aten√ß√£o e rea√ß√£o cerebral. <mcreference
          link="https://m.apkpure.com/schulte-table-brain-training/ru.kriopeg.schultetable"
          index="4">4</mcreference
        >
      </p>

      <h3>Como funciona?</h3>
      <p>
        √â uma grade (geralmente 5x5) com n√∫meros ou letras distribu√≠dos
        aleatoriamente. O objetivo √© encontrar e clicar nos n√∫meros em ordem
        sequencial (1, 2, 3...) o mais r√°pido poss√≠vel. <mcreference
          link="https://m.apkpure.com/schulte-table-brain-training/ru.kriopeg.schultetable"
          index="4">4</mcreference
        >
      </p>

      <h3>Benef√≠cios do exerc√≠cio:</h3>
      <ul>
        <li>
          <strong>Melhora da concentra√ß√£o:</strong> As Tabelas de Schulte for√ßam
          o indiv√≠duo a se concentrar profundamente, bloqueando distra√ß√µes externas.
          <mcreference link="https://calcopedia.com/pt/tables/" index="2"
            >2</mcreference
          >
        </li>
        <li>
          <strong>Desenvolvimento da vis√£o perif√©rica:</strong> O exerc√≠cio ajuda
          a ampliar o campo de vis√£o e melhorar a percep√ß√£o visual. <mcreference
            link="https://fastreading.yurkap.com/pt"
            index="3">3</mcreference
          >
        </li>
        <li>
          <strong>Aumento da velocidade de leitura:</strong> Ao melhorar a vis√£o
          perif√©rica e concentra√ß√£o, contribui para uma leitura mais r√°pida. <mcreference
            link="https://fastreading.yurkap.com/pt"
            index="3">3</mcreference
          >
        </li>
        <li>
          <strong>Coordena√ß√£o olho-m√£o:</strong> √Ä medida que identifica n√∫meros
          em sequ√™ncia, a coordena√ß√£o entre o que √© visto e a a√ß√£o √© constantemente
          refinada. <mcreference
            link="https://calcopedia.com/pt/tables/"
            index="2">2</mcreference
          >
        </li>
        <li>
          <strong>Fortalecimento da mem√≥ria:</strong> O exerc√≠cio regular fortalece
          a mem√≥ria visual e aumenta a capacidade de armazenamento. <mcreference
            link="http://pt.nextews.com/4439105a/"
            index="1">1</mcreference
          >
        </li>
      </ul>

      <p>
        O estado de concentra√ß√£o alcan√ßado durante o exerc√≠cio com as tabelas de
        Schulte √© compar√°vel √† medita√ß√£o, sendo eficaz tanto para adultos quanto
        para crian√ßas. <mcreference
          link="https://fastreading.yurkap.com/pt"
          index="3">3</mcreference
        >
      </p>
    </div>
  </div>
</Layout>

<style>
  .game-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    text-align: center;
    width: 100%;
    box-sizing: border-box;
  }

  @media (max-width: 768px) {
    .game-container {
      padding: 15px;
    }
  }

  @media (max-width: 480px) {
    .game-container {
      padding: 10px;
    }
  }

  .game-header {
    position: relative;
  }

  .game-header h1 {
    color: #333;
    margin-bottom: 10px;
  }

  .game-header p {
    color: #666;
    margin-bottom: 30px;
  }

  .back-btn {
    position: absolute;
    top: 0;
    left: 0;
    background: #f0f0f0;
    border: 2px solid #ddd;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
    transition: all 0.3s ease;
    color: #333;
  }

  .back-btn:hover {
    background: #e0e0e0;
    transform: scale(1.1);
  }

  .theme-toggle {
    position: absolute;
    top: 0;
    right: 0;
    background: #f0f0f0;
    border: 2px solid #ddd;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
    transition: all 0.3s ease;
  }

  .theme-toggle:hover {
    background: #e0e0e0;
    transform: scale(1.1);
  }

  /* Ajustes para mobile - reposicionar bot√µes */
  @media (max-width: 768px) {
    .back-btn {
      position: static;
      margin: 10px auto 10px auto;
      width: 45px;
      height: 45px;
      font-size: 18px;
    }

    .theme-toggle {
      position: static;
      margin: 10px auto 20px auto;
      width: 45px;
      height: 45px;
      font-size: 18px;
    }

    .game-header {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  }

  .game-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 30px;
    margin-bottom: 30px;
    flex-wrap: wrap;
  }

  .control-group {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .control-group label {
    font-weight: bold;
    color: #333;
  }

  select {
    padding: 8px 12px;
    border: 2px solid #ddd;
    border-radius: 6px;
    font-size: 16px;
    background: white;
  }

  .btn {
    padding: 10px 20px;
    border: none;
    border-radius: 6px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .btn-primary {
    background: #4caf50;
    color: white;
  }

  .btn-primary:hover {
    background: #45a049;
  }

  .btn-secondary {
    background: #f44336;
    color: white;
  }

  .btn-secondary:hover {
    background: #da190b;
  }

  /* Explanation Section */
  .explanation-section {
    max-width: 800px;
    margin: 40px auto 0;
    padding: 30px;
    background-color: #f9f9f9;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    text-align: left;
  }

  .explanation-section h2 {
    color: #333;
    font-size: 28px;
    margin-bottom: 20px;
    text-align: center;
  }

  .explanation-section h3 {
    color: #333;
    font-size: 22px;
    margin: 25px 0 15px;
  }

  .explanation-section p {
    color: #666;
    font-size: 16px;
    line-height: 1.6;
    margin-bottom: 15px;
  }

  .explanation-section ul {
    color: #666;
    margin: 15px 0;
    padding-left: 20px;
  }

  .explanation-section li {
    margin-bottom: 10px;
    line-height: 1.6;
  }

  .explanation-section strong {
    color: #4caf50;
  }

  .dark-mode .explanation-section {
    background-color: #333;
  }

  .dark-mode .explanation-section h2 {
    color: #e0e0e0;
  }

  .dark-mode .explanation-section h3 {
    color: #e0e0e0;
  }

  .dark-mode .explanation-section p {
    color: #b0b0b0;
  }

  .dark-mode .explanation-section ul {
    color: #b0b0b0;
  }

  .dark-mode .explanation-section strong {
    color: #4caf50;
  }

  .btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .game-info {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 30px;
    margin-bottom: 30px;
    flex-wrap: wrap;
  }

  .timer {
    font-size: 24px;
    font-weight: bold;
    color: #333;
    background: #f0f0f0;
    padding: 10px 20px;
    border-radius: 6px;
  }

  .next-number {
    font-size: 18px;
    font-weight: bold;
    color: #4caf50;
  }

  .game-message {
    font-size: 16px;
    font-weight: bold;
    color: #666;
  }

  .grid-container {
    position: relative;
    max-width: 700px;
    margin: 0 auto;
    width: 100%;
  }

  .countdown {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 120px;
    font-weight: bold;
    color: #4caf50;
    z-index: 10;
    background: rgba(255, 255, 255, 0.95);
    border-radius: 50%;
    width: 200px;
    height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    animation: countdownPulse 1s ease-in-out;
  }

  .countdown.hidden {
    display: none;
  }

  @keyframes countdownPulse {
    0% {
      transform: translate(-50%, -50%) scale(0.5);
      opacity: 0;
    }
    50% {
      transform: translate(-50%, -50%) scale(1.1);
      opacity: 1;
    }
    100% {
      transform: translate(-50%, -50%) scale(1);
      opacity: 1;
    }
  }

  .schulte-grid {
    display: grid;
    gap: 5px;
    padding: 20px;
    background: #f9f9f9;
    border-radius: 10px;
    width: 100%;
    box-sizing: border-box;

    .cell {
      aspect-ratio: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      background: white;
      border: 2px solid #ddd;
      border-radius: 6px;
      font-size: 20px;
      font-weight: bold;
      color: #1a1a1a !important;
      cursor: pointer;
      transition: all 0.3s ease;
      user-select: none;
      min-height: 55px;
      min-width: 55px;
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    /* Responsividade para dispositivos m√≥veis */
    @media (max-width: 768px) {
      max-width: 95vw;
      padding: 10px;
      gap: 3px;

      .cell {
        min-height: 40px;
        min-width: 40px;
        font-size: 16px;
        border-width: 1px;
      }
    }

    @media (max-width: 480px) {
      max-width: 98vw;
      padding: 5px;
      gap: 2px;

      .cell {
        min-height: 35px;
        min-width: 35px;
        font-size: 14px;
        border-width: 1px;
      }
    }

    .cell:hover {
      background: #e3f2fd;
      border-color: #2196f3;
      transform: scale(1.05);
    }

    .cell.correct {
      background: #dbe7dc !important;
      border-color: #93b194 !important;
      /* color: #6a8a6c; */
    }
  }

  @keyframes shake {
    0%,
    100% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(-5px);
    }
    75% {
      transform: translateX(5px);
    }
  }

  .cell.shake {
    animation: shake 0.5s;
  }

  /* Modo Escuro */
  body.dark-mode {
    background: #1a1a1a;
    color: #e0e0e0;
  }

  .dark-mode .game-container {
    background: #2d2d2d;
    color: #e0e0e0;
  }

  .dark-mode .game-header h1 {
    color: #e0e0e0;
  }

  .dark-mode .game-header p {
    color: #b0b0b0;
  }

  .dark-mode .back-btn {
    background: #404040;
    border-color: #555;
    color: #e0e0e0;
  }

  .dark-mode .back-btn:hover {
    background: #505050;
  }

  .dark-mode .theme-toggle {
    background: #404040;
    border-color: #555;
    color: #e0e0e0;
  }

  .dark-mode .theme-toggle:hover {
    background: #505050;
  }

  .dark-mode .btn-primary {
    background: #4caf50;
    border-color: #4caf50;
  }

  .dark-mode .btn-secondary {
    background: #666;
    border-color: #666;
    color: #e0e0e0;
  }

  .dark-mode .countdown {
    color: #4caf50;
    background: rgba(45, 45, 45, 0.95);
  }

  .dark-mode .schulte-grid {
    background: #333;
  }

  .dark-mode .cell {
    background: #404040;
    border-color: #555;
    color: #e0e0e0 !important;
  }

  .dark-mode .cell:hover {
    background: #505050;
    border-color: #4caf50;
  }

  .dark-mode .cell.correct {
    background: #2e7d32 !important;
    border-color: #4caf50 !important;
    color: #e0e0e0 !important;
  }

  .dark-mode .timer {
    color: #4caf50;
  }

  .dark-mode .next-number {
    color: #4caf50;
  }

  .dark-mode .game-message {
    color: #b0b0b0;
  }

  /* Modal de Parab√©ns */
  .congratulations-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .modal-content {
    background: white;
    padding: 40px;
    border-radius: 20px;
    text-align: center;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    max-width: 400px;
    width: 90%;
  }

  .modal-content h2 {
    color: #4caf50;
    margin-bottom: 20px;
    font-size: 2em;
  }

  .modal-content p {
    color: #333;
    margin-bottom: 20px;
    font-size: 1.2em;
  }

  .completion-time {
    color: #4caf50 !important;
    font-weight: bold;
    font-size: 1.4em !important;
    margin-bottom: 30px !important;
  }

  .reload-button {
    background: #4caf50;
    color: white;
    border: none;
    padding: 15px 30px;
    border-radius: 10px;
    font-size: 1.1em;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .reload-button:hover {
    background: #45a049;
  }

  /* Dark mode para o modal */
  .dark-mode .modal-content {
    background: #2d2d2d;
    color: #e0e0e0;
  }

  .dark-mode .modal-content h2 {
    color: #4caf50;
  }

  .dark-mode .modal-content p {
    color: #b0b0b0;
  }

  .dark-mode .completion-time {
    color: #4caf50 !important;
  }

  @media (max-width: 600px) {
    .game-controls {
      flex-direction: column;
      gap: 15px;
    }

    .game-info {
      flex-direction: column;
      gap: 15px;
    }

    .schulte-grid {
      max-width: 350px;
    }

    .cell {
      font-size: 16px;
    }

    .theme-toggle {
      width: 40px;
      height: 40px;
      font-size: 16px;
    }
  }
</style>

<script>
  // Game state variables
  let gridSize: number = 5;
  let maxNumber: number = gridSize * gridSize;
  let currentNumber: number = 1;
  let startTime: number | null = null;
  let timerInterval: ReturnType<typeof setInterval> | null = null;
  let isGameActive: boolean = false;

  // DOM elements
  let gridSizeSelect: HTMLSelectElement | null = null;
  let gameBtn: HTMLButtonElement | null = null;
  let timerDisplay: HTMLElement | null = null;
  let nextNumberDisplay: HTMLElement | null = null;
  let schulteGrid: HTMLElement | null = null;
  let gameMessage: HTMLElement | null = null;

  function initializeGame(): void {
    console.log("Initializing game...");

    // Get DOM elements
    gridSizeSelect = document.getElementById("gridSize") as HTMLSelectElement;
    gameBtn = document.getElementById("gameBtn") as HTMLButtonElement;
    timerDisplay = document.getElementById("timer");
    nextNumberDisplay = document.getElementById("nextNumber");
    schulteGrid = document.getElementById("schulteGrid");
    gameMessage = document.getElementById("gameMessage");

    if (!schulteGrid) {
      console.error("schulteGrid element not found!");
      return;
    }

    // Bind events
    bindEvents();

    // Generate initial grid
    generateGrid();
  }

  function bindEvents(): void {
    if (gridSizeSelect) {
      gridSizeSelect.addEventListener("change", () => {
        if (gridSizeSelect) {
          const newSize = parseInt(gridSizeSelect.value, 10);
          if (!isNaN(newSize)) {
            gridSize = newSize;
            resetGame();
          }
        }
      });
    }

    if (gameBtn) {
      gameBtn.addEventListener("click", () => {
        if (isGameActive) {
          resetGame();
        } else if (gameBtn && gameBtn.textContent === "Recome√ßar") {
          resetGame();
        } else {
          startGame();
        }
      });
    }
  }

  function generateGrid(): void {
    console.log("Generating grid with size:", gridSize);

    if (!schulteGrid) {
      console.error("schulteGrid not available!");
      return;
    }

    schulteGrid.innerHTML = "";
    schulteGrid.style.gridTemplateColumns = `repeat(${gridSize}, 1fr)`;

    const numbers = Array.from({ length: maxNumber }, (_, index) => index + 1);
    shuffle(numbers);

    console.log("Creating cells for numbers:", numbers);

    numbers.forEach((number) => {
      const cell = document.createElement("div");
      cell.className = "cell";
      cell.textContent = number.toString();
      cell.dataset.number = number.toString();

      cell.addEventListener("click", () => {
        handleCellClick(cell, number);
      });

      if (schulteGrid) {
        schulteGrid.appendChild(cell);
      }
    });

    console.log("Grid generated successfully with", numbers.length, "cells");
  }

  function shuffle(array: number[]): number[] {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      const temp = array[i];
      if (temp !== undefined && array[j] !== undefined) {
        array[i] = array[j]!;
        array[j] = temp;
      }
    }
    return array;
  }

  function startGame(): void {
    console.log("Starting countdown...");

    // Disable button during countdown
    if (gameBtn) {
      gameBtn.disabled = true;
    }
    if (gridSizeSelect) gridSizeSelect.disabled = true;

    // Show countdown
    const countdownElement = document.getElementById("countdown");
    if (countdownElement) {
      countdownElement.classList.remove("hidden");

      let count = 3;
      countdownElement.textContent = count.toString();

      const countdownInterval = setInterval(() => {
        count--;
        if (count > 0) {
          countdownElement.textContent = count.toString();
          // Restart animation
          countdownElement.style.animation = "none";
          countdownElement.offsetHeight; // Trigger reflow
          countdownElement.style.animation = "countdownPulse 1s ease-in-out";
        } else {
          countdownElement.textContent = "GO!";
          countdownElement.style.animation = "none";
          countdownElement.offsetHeight;
          countdownElement.style.animation = "countdownPulse 1s ease-in-out";

          setTimeout(() => {
            countdownElement.classList.add("hidden");
            actuallyStartGame();
          }, 1000);

          clearInterval(countdownInterval);
        }
      }, 1000);
    } else {
      // Fallback if countdown element not found
      actuallyStartGame();
    }
  }

  function actuallyStartGame(): void {
    console.log("Starting game...");
    isGameActive = true;
    currentNumber = 1;
    startTime = Date.now();

    if (nextNumberDisplay)
      nextNumberDisplay.textContent = `Pr√≥ximo: ${currentNumber}`;

    if (gameBtn) {
      gameBtn.textContent = "Reiniciar";
      gameBtn.className = "btn btn-secondary";
      gameBtn.disabled = false;
    }
    if (gridSizeSelect) gridSizeSelect.disabled = true;

    if (gameMessage) {
      gameMessage.textContent = `Encontre o n√∫mero ${currentNumber}`;
      gameMessage.style.color = "#4CAF50";
    }

    startTimer();
  }

  function startTimer(): void {
    timerInterval = setInterval(() => {
      if (isGameActive && startTime && timerDisplay) {
        const elapsed = Date.now() - startTime;
        const minutes = Math.floor(elapsed / 60000);
        const seconds = Math.floor((elapsed % 60000) / 1000);
        timerDisplay.textContent = `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
      }
    }, 100);
  }

  function handleCellClick(cell: HTMLElement, number: number): void {
    if (!isGameActive) {
      // Se o jogo n√£o estiver ativo, iniciar a contagem regressiva
      if (gameBtn && gameBtn.textContent === "Iniciar") {
        startGame();
      } else if (gameMessage) {
        gameMessage.textContent =
          'Clique em "Iniciar" para come√ßar! Ou clique na tabela';
        gameMessage.style.color = "#ff6b6b";
      }
      return;
    }

    if (number === currentNumber) {
      cell.classList.add("correct");
      currentNumber++;
      if (nextNumberDisplay)
        nextNumberDisplay.textContent = `Pr√≥ximo: ${currentNumber}`;

      if (currentNumber > maxNumber) {
        endGame(true);
      } else {
        if (gameMessage) {
          gameMessage.textContent = `Encontre o n√∫mero ${currentNumber}`;
          gameMessage.style.color = "#4CAF50";
        }
      }
    } else {
      if (gameMessage) {
        gameMessage.textContent = `N√∫mero incorreto! Procure o ${currentNumber}`;
        gameMessage.style.color = "#ff6b6b";
      }
      cell.classList.add("shake");
      setTimeout(() => {
        cell.classList.remove("shake");
      }, 500);
    }
  }

  function showCongulations(completionTime: string): void {
    const modal = document.getElementById("congratulations-modal");
    if (!modal) return;

    // Exibir o tempo de finaliza√ß√£o
    const timeElement = document.getElementById("completion-time");
    if (timeElement) {
      timeElement.textContent = `‚è±Ô∏è Tempo: ${completionTime}`;
    }

    modal.style.display = "flex";

    // Adicionar event listener para o bot√£o de reload
    const reloadButton = document.getElementById("reload-button");
    if (reloadButton) {
      reloadButton.onclick = () => {
        modal.style.display = "none";
        resetGame();
      };
    }
  }

  function endGame(completed: boolean): void {
    isGameActive = false;
    if (timerInterval) {
      clearInterval(timerInterval);
    }

    if (completed) {
      const elapsed = Date.now() - (startTime || 0);
      const minutes = Math.floor(elapsed / 60000);
      const seconds = Math.floor((elapsed % 60000) / 1000);
      const totalTime = `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
      if (gameMessage) {
        gameMessage.textContent = `Parab√©ns! Voc√™ completou em ${totalTime}!`;
        gameMessage.style.color = "#4CAF50";
      }

      // Mostrar modal de parab√©ns com o tempo
      showCongulations(totalTime);
    }

    if (gameBtn) {
      gameBtn.textContent = "Recome√ßar";
      gameBtn.className = "btn btn-secondary";
    }
    if (gridSizeSelect) gridSizeSelect.disabled = false;
  }

  function resetGame(): void {
    isGameActive = false;
    currentNumber = 1;
    if (nextNumberDisplay)
      nextNumberDisplay.textContent = `Pr√≥ximo: ${currentNumber}`;

    if (timerInterval) {
      clearInterval(timerInterval);
      timerInterval = null;
    }

    if (timerDisplay) timerDisplay.textContent = "00:00";
    if (gameMessage) {
      gameMessage.textContent = 'Clique em "Iniciar" para come√ßar!';
      gameMessage.style.color = "#666";
    }

    if (gameBtn) {
      gameBtn.textContent = "Iniciar";
      gameBtn.className = "btn btn-primary";
    }
    if (gridSizeSelect) gridSizeSelect.disabled = false;

    maxNumber = gridSize * gridSize;
    generateGrid();
  }

  // Initialize the game when the page loads
  document.addEventListener("DOMContentLoaded", () => {
    console.log("DOM loaded, initializing game...");
    setTimeout(() => {
      initializeGame();

      // Back button functionality
      const backBtn = document.getElementById(
        "back-btn"
      ) as HTMLButtonElement | null;
      if (backBtn) {
        backBtn.addEventListener("click", () => {
          window.history.back();
        });
      }

      // Theme toggle functionality
      const themeToggle = document.getElementById(
        "theme-toggle"
      ) as HTMLButtonElement | null;

      if (themeToggle) {
        // Check saved theme
        const savedTheme = localStorage.getItem("schulte-theme");
        if (savedTheme === "dark") {
          document.body.classList.add("dark-mode");
          const themeIcon = themeToggle.querySelector(".theme-icon");
          if (themeIcon) themeIcon.textContent = "‚òÄÔ∏è";
        }

        themeToggle.addEventListener("click", () => {
          document.body.classList.toggle("dark-mode");
          const isDark = document.body.classList.contains("dark-mode");
          const themeIcon = themeToggle.querySelector(".theme-icon");

          if (themeIcon) {
            themeIcon.textContent = isDark ? "‚òÄÔ∏è" : "üåô";
          }

          // Save preference
          localStorage.setItem("schulte-theme", isDark ? "dark" : "light");
        });
      }
    }, 100);
  });
</script>
